* Step 1
cargo init resume-live-coding
cd resume-live-coding/src
mkdir bin/
cp main.rs bin/server.rs
mv main.rs bin/client.rs


Cargo.toml:
[[[[bin]]]]
name = "server"

[[[[bin]]]]
name = "client"


cargo run --bin server
cargo run --bin client


* Step 2
Replace client.rs with the final implementation
Copy cli.yml

Add to Cargo.toml after [dependencies]:
clap = { version = "2.33.3", features = ["yaml"] }
serde = { version = "1.0.125", features = ["derive"] }
serde_json = "1.0.64"

cargo run --bin client
cargo run --bin client -- --name Jip --position "HW Engineer"

* Step 3: trivial TCP server
server.rs (first without Err matching):
use std::net::TcpListener;

fn main() {
    let listener = TcpListener::bind("127.0.0.1:9000").expect("Cannot listen to the port");
    for stream_res in listener.incoming() {
        match stream_res {
            Ok(mut stream) => {
                println!("New client is accepted!");
            }
            Err(e) => {
                println!("Reception failed: {:?}", e);
            }
        }
    }
    println!("Finished.");
}


In one terminal, run:
cargo run --bin server
In another terminal, run several times in a row:
cargo run --bin client -q -- --name Jip --position "HW engineer"


* Step 4: prototype of multi-threaded request execution
server.rs:
use std::sync::mpsc::channel;
use std::io::Read;

use threadpool::ThreadPool;


/// Encodes the employee data like the position
struct Employee {
    name: String,
    position: String,
}

/// Parse the JSON request and send it further to database
fn execute_request(received_bytes: Vec<u8>, db_sender: std::sync::mpsc::Sender<Employee>) {
    println!("{:?}", received_bytes);
}


    let pool = ThreadPool::new(8);
    let (sender, receiver) = channel::<Employee>();

    let mut buffer = [0u8; 2048];


                let message_size = stream.read(&mut buffer).unwrap();
                let received = buffer[..message_size].to_vec();
                let sender_copy = sender.clone();
                pool.execute(move || execute_request(received, sender_copy));
 

Add to Cargo.toml:
threadpool = "1.8.1"

* Step 5: added unit test
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_execute_request() {
        let (sender, receiver) = channel::<Employee>();
        execute_request(
            "{\"name\": \"my-name\", \"position\":\"my-position\"}"
                .as_bytes()
                .to_vec(),
            sender,
        );
        assert_eq!(
            receiver.recv().unwrap(),
            Employee {
                name: String::from("my-name"),
                position: String::from("my-position"),
            }
        );
    }
}


cargo test


    let received_string = std::str::from_utf8(&received_bytes).unwrap();
    let e: Employee = serde_json::from_str(received_string).unwrap();
    db_sender.send(e).unwrap();


Derive Deserialize
use serde::Deserialize;
cargo test


* Step 6: database mock added
    // Database thread
    pool.execute(move || update_database(receiver));


/// Update the database with a new employee
fn update_database(receiver: std::sync::mpsc::Receiver<Employee>) {
    let mut state = HashMap::new();
    loop {
        let new_emp = receiver.recv().unwrap();
        state.insert(new_emp.name.clone(), new_emp);
        println!("Database state: {:?}", state);
    }
}

use std::collections::HashMap;


cargo run --bin server
cargo run --bin client -q -- --name Jip --position "HW engineer"
cargo run --bin client -q -- --name Janneke --position "SW architect"


* Step 7: browse generated documentation
//! Back-end server application that updates the database of employees.


cargo doc --open
